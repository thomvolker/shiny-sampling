[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n    # Application title\r\n    titlePanel(\"Sampling distribution\"),\r\n\r\n    # Sidebar with a slider input for number of bins\r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            sliderInput(\"diff\",\r\n                        \"Difference between groups\",\r\n                        min = -2,\r\n                        max = 2,\r\n                        step = 0.1,\r\n                        value = 0.1),\r\n            sliderInput(\"sd\",\r\n                        \"Pooled standard deviation\",\r\n                        min = 1,\r\n                        max = 5,\r\n                        value = 2),\r\n            sliderInput(\"n\",\r\n                        \"Sample size\",\r\n                        min = 10,\r\n                        max = 200,\r\n                        value = 50,\r\n                        step = 1),\r\n            sliderInput(\"alpha\",\r\n                        \"Significance level\",\r\n                        min = 0.001,\r\n                        max = 0.5,\r\n                        value = 0.05,\r\n                        step = 0.001),\r\n            actionButton(\"reset\", \"Reset settings\")\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n           plotOutput(\"distPlot\")\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n  library(ggplot2)\r\n\r\n  observeEvent(input$reset, {\r\n    updateSliderInput(inputId = \"diff\", value = 0.1)\r\n    updateSliderInput(inputId = \"sd\", value = 2)\r\n    updateSliderInput(inputId = \"n\", value = 50)\r\n    updateSliderInput(inputId = \"alpha\", value = 0.05)\r\n  })\r\n\r\n    output$distPlot <- renderPlot({\r\n      nulldist <- \\(x, n, sd) dt(x*sqrt(n)/sd, n - 2) / (sd/sqrt(n))\r\n      altdist  <- \\(x, n, sd, diff) dt((x - diff)*sqrt(n)/sd, n-2) / (sd/sqrt(n))\r\n\r\n      p <- ggplot2::ggplot() +\r\n        ggplot2::stat_function(fun = nulldist, args = list(n = input$n, sd = input$sd),\r\n                               color = \"navy\", linewidth = 2, xlim = c(-6, 6), n = 10001) +\r\n        ggplot2::stat_function(fun = altdist, args = list(n = input$n, sd = input$sd, diff = input$diff),\r\n                               color = \"salmon\", linewidth = 2, linetype = 2, xlim = c(-6, 6),\r\n                               n = 10001) +\r\n        ggplot2::theme_minimal()\r\n\r\n      if (input$diff == 0) {\r\n        tval <- qt(1 - input$alpha/2, input$n-2) * input$sd/sqrt(input$n)\r\n        alpha <- 1 - integrate(nulldist, -tval, tval, n = input$n, sd = input$sd)$value\r\n        p <- p +\r\n          ggplot2::geom_vline(xintercept = c(-1, 1) * tval) +\r\n          ggplot2::stat_function(fun = nulldist, args = list(n = input$n, sd = input$sd),\r\n                                 geom = \"area\",\r\n                                 col = \"transparent\", fill = \"lightblue3\", alpha = 0.7, n = 10001,\r\n                                 xlim = c(-6, -tval)) +\r\n          ggplot2::stat_function(fun = nulldist, args = list(n = input$n, sd = input$sd),\r\n                                 geom = \"area\",\r\n                                 col = \"transparent\", fill = \"lightblue3\", alpha = 0.7, n = 10001,\r\n                                 xlim = c(tval, 6)) +\r\n          ggplot2::geom_label(ggplot2::aes(x = 4, y = nulldist(0, input$n, input$sd),\r\n                                           label = paste0(\"Type-I error rate: \", round(alpha, 3))),\r\n                              size = 8, col = \"lightblue3\")\r\n      } else {\r\n        tval <- qt(1 - input$alpha/2, input$n-2) * input$sd/sqrt(input$n)\r\n        power <- 1 - integrate(altdist, -tval, tval, diff = input$diff, n = input$n, sd = input$sd)$value\r\n        p <- p +\r\n          ggplot2::geom_vline(xintercept = c(-1, 1) * tval) +\r\n          ggplot2::stat_function(fun = altdist, args = list(n = input$n, sd = input$sd, diff = input$diff),\r\n                                 geom = \"area\",\r\n                                 col = \"transparent\", fill = \"lightcoral\", alpha = 0.7, n = 10001,\r\n                                 xlim = c(-6, -tval)) +\r\n          ggplot2::stat_function(fun = altdist, args = list(n = input$n, sd = input$sd, diff = input$diff),\r\n                                 geom = \"area\",\r\n                                 col = \"transparent\", fill = \"lightcoral\", alpha = 0.7, n = 10001,\r\n                                 xlim = c(tval, 6)) +\r\n          ggplot2::geom_label(ggplot2::aes(x = 4, y = nulldist(0, input$n, input$sd),\r\n                             label = paste0(\"Power: \", round(power, 3))),\r\n                             size = 8, col = \"lightcoral\") +\r\n          ggplot2::ylab(NULL)\r\n      }\r\n      p\r\n    })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
